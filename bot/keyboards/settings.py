from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


def get_settings_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üîó –¢–µ–ª–µ–≥—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç", callback_data="account_menu"
                )
            ],
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
        ]
    )


def get_gifts_count_keyboard(current):
    buttons = []
    for i in range(1, 6):
        emoji = "‚úÖ" if i == current else str(i)
        if i == 1:
            row = [
                InlineKeyboardButton(text=f"{emoji}", callback_data=f"set_gifts_{i}")
            ]
        else:
            row.append(
                InlineKeyboardButton(text=f"{emoji}", callback_data=f"set_gifts_{i}")
            )

        if len(row) == 5 or i == 5:
            buttons.append(row)
            row = []

    buttons.append(
        [InlineKeyboardButton(text="üîô –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_menu")]
    )
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_filter_input_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_menu")]
        ]
    )


def get_account_menu_keyboard(
    connected: bool,
    use_personal_buy: bool,
    allow_premium_buy: bool,
    buy_only_personal: bool = False,
):
    rows = []
    if connected:
        rows.append(
            [InlineKeyboardButton(text="‚úÖ –ê–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω", callback_data="noop")]
        )
        rows.append(
            [
                InlineKeyboardButton(
                    text="üß™ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", callback_data="telethon_test"
                )
            ]
        )
        rows.append(
            [
                InlineKeyboardButton(
                    text=(
                        "üõ†Ô∏è –ü—Ä–æ–±–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–π: –í–∫–ª"
                        if use_personal_buy
                        else "üõ†Ô∏è –ü—Ä–æ–±–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–π: –í—ã–∫–ª"
                    ),
                    callback_data="toggle_personal_buy",
                )
            ]
        )
        rows.append(
            [
                InlineKeyboardButton(
                    text=(
                        "üîí –ü–æ–∫—É–ø–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–π: –í–∫–ª"
                        if buy_only_personal
                        else "üîí –ü–æ–∫—É–ø–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–π: –í—ã–∫–ª"
                    ),
                    callback_data="toggle_only_personal_buy",
                )
            ]
        )
        rows.append(
            [
                InlineKeyboardButton(
                    text=(
                        "üëë –ü–æ–∫—É–ø–∞—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–¥–∞—Ä–∫–∏: –í–∫–ª"
                        if allow_premium_buy
                        else "üëë –ü–æ–∫—É–ø–∞—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–¥–∞—Ä–∫–∏: –í—ã–∫–ª"
                    ),
                    callback_data="toggle_premium_buy",
                )
            ]
        )
        rows.append(
            [
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="unlink_account"
                )
            ]
        )
    else:
        rows.append(
            [
                InlineKeyboardButton(
                    text="üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="link_account"
                )
            ]
        )
    rows.append(
        [InlineKeyboardButton(text="üîô –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_menu")]
    )
    return InlineKeyboardMarkup(inline_keyboard=rows)


def build_code_keypad(code: str):
    display = f"–ö–æ–¥: {code or '‚Äî'}"
    rows = [
        [InlineKeyboardButton(text=display, callback_data="noop")],
        [
            InlineKeyboardButton(text="1", callback_data="code_digit_1"),
            InlineKeyboardButton(text="2", callback_data="code_digit_2"),
            InlineKeyboardButton(text="3", callback_data="code_digit_3"),
        ],
        [
            InlineKeyboardButton(text="4", callback_data="code_digit_4"),
            InlineKeyboardButton(text="5", callback_data="code_digit_5"),
            InlineKeyboardButton(text="6", callback_data="code_digit_6"),
        ],
        [
            InlineKeyboardButton(text="7", callback_data="code_digit_7"),
            InlineKeyboardButton(text="8", callback_data="code_digit_8"),
            InlineKeyboardButton(text="9", callback_data="code_digit_9"),
        ],
        [
            InlineKeyboardButton(text="‚å´", callback_data="code_back"),
            InlineKeyboardButton(text="0", callback_data="code_digit_0"),
            InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="code_submit"),
        ],
        [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="account_menu")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)


def get_account_consent_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü—Ä–∏–Ω–∏–º–∞—é", callback_data="account_consent_accept"
                )
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="account_menu")],
        ]
    )
