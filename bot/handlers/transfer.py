from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from datetime import datetime
from bot.database import users, transactions
from bot.states import TransferState
from bot.utils.helpers import generate_transaction_id
from bot.keyboards.transfer import (
    get_transfer_cancel_keyboard,
    get_transfer_confirm_keyboard,
)
from bot.keyboards.main_menu import get_main_menu

router = Router()


@router.message(Command("transfer"))
async def transfer_start(message: Message, state: FSMContext):
    await state.set_state(TransferState.recipient)
    await message.answer(
        "üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ).", reply_markup=get_transfer_cancel_keyboard()
    )


@router.callback_query(F.data == "transfer_menu")
async def transfer_menu_callback(callback: CallbackQuery, state: FSMContext):
    await state.set_state(TransferState.recipient)
    await callback.message.edit_text(
        "üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ).", reply_markup=get_transfer_cancel_keyboard()
    )


@router.callback_query(F.data == "cancel_transfer")
async def cancel_transfer(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu()
    )


@router.message(TransferState.recipient)
async def transfer_recipient(message: Message, state: FSMContext):
    text = (message.text or "").strip()
    if not text.isdigit():
        await message.answer(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            reply_markup=get_transfer_cancel_keyboard(),
        )
        return
    recipient_id = int(text)
    if recipient_id == message.from_user.id:
        await message.answer(
            "‚ùå –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ",
            reply_markup=get_transfer_cancel_keyboard(),
        )
        return
    rec = await users.find_one({"user_id": recipient_id})
    if not rec:
        await message.answer(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–æ—Ç–µ",
            reply_markup=get_transfer_cancel_keyboard(),
        )
        return
    await state.update_data(recipient_id=recipient_id)
    await state.set_state(TransferState.amount)

    sender = await users.find_one({"user_id": message.from_user.id})
    balance = sender.get("balance", 0) if sender else 0
    await message.answer(
        f"üí´ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –∑–≤—ë–∑–¥–∞—Ö\n\n"
        f"–î–æ—Å—Ç—É–ø–Ω–æ: <b>{balance:,} ‚≠ê</b>\n"
        f"–¢–æ–ª—å–∫–æ <b>—Ü–µ–ª—ã–µ</b> –∑–Ω–∞—á–µ–Ω–∏—è. –ö–æ–º–∏—Å—Å–∏—è <b>–Ω–µ –≤–∑–∏–º–∞–µ—Ç—Å—è</b>.",
        reply_markup=get_transfer_cancel_keyboard(),
    )


@router.message(TransferState.amount)
async def transfer_amount(message: Message, state: FSMContext):
    try:
        amount = int((message.text or "").strip())
        if amount <= 0:
            raise ValueError
    except Exception:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–∫–æ–º–∏—Å—Å–∏—è –Ω–µ –≤–∑–∏–º–∞–µ—Ç—Å—è)",
            reply_markup=get_transfer_cancel_keyboard(),
        )
        return

    data = await state.get_data()
    recipient_id = data.get("recipient_id")
    if not recipient_id:
        await state.clear()
        await message.answer(
            "‚ö†Ô∏è –°–µ—Å—Å–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–±—Ä–æ—à–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ –º–µ–Ω—é.",
            reply_markup=get_main_menu(),
        )
        return

    sender = await users.find_one({"user_id": message.from_user.id})
    if not sender or sender.get("balance", 0) < amount:
        await message.answer(
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ",
            reply_markup=get_transfer_cancel_keyboard(),
        )
        return

    await message.answer(
        f"üí∞ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:\n\n"
        f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: <code>{recipient_id}</code>\n"
        f"üíé –°—É–º–º–∞: <b>{amount:,} ‚≠ê</b>\n\n"
        f"‚ö†Ô∏è <i>–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω</i>",
        reply_markup=get_transfer_confirm_keyboard(recipient_id, amount),
    )


@router.callback_query(F.data.startswith("confirm_transfer_"))
async def confirm_transfer(callback: CallbackQuery, state: FSMContext):
    data_parts = callback.data.split("_")
    if len(data_parts) != 4:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        return

    recipient_id = int(data_parts[2])
    amount = int(data_parts[3])

    state_data = await state.get_data()
    if state_data.get("recipient_id") != recipient_id:
        await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
        return

    sender = await users.find_one({"user_id": callback.from_user.id})
    if not sender or sender.get("balance", 0) < amount:
        await callback.message.edit_text(
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ", reply_markup=get_main_menu()
        )
        return

    await users.update_one(
        {"user_id": callback.from_user.id},
        {"$inc": {"balance": -amount}, "$set": {"refund_locked": True}},
    )
    await users.update_one({"user_id": recipient_id}, {"$inc": {"balance": amount}})

    out_tx = generate_transaction_id()
    in_tx = generate_transaction_id()
    now = datetime.utcnow()
    await transactions.insert_many(
        [
            {
                "transaction_id": out_tx,
                "user_id": callback.from_user.id,
                "type": "transfer_out",
                "amount": amount,
                "created_at": now,
                "status": "completed",
                "meta": {"recipient_id": recipient_id},
            },
            {
                "transaction_id": in_tx,
                "user_id": recipient_id,
                "type": "transfer_in",
                "amount": amount,
                "created_at": now,
                "status": "completed",
                "meta": {"from_user_id": callback.from_user.id},
            },
        ]
    )

    try:
        rec_doc = await users.find_one({"user_id": recipient_id})
        rec_balance = rec_doc.get("balance", 0) if rec_doc else 0
        await callback.bot.send_message(
            recipient_id,
            f"üì• –í–∞–º –ø–µ—Ä–µ–≤–µ–ª–∏ {amount:,} ‚≠ê –æ—Ç ID {callback.from_user.id}. –ë–∞–ª–∞–Ω—Å: {rec_balance:,} ‚≠ê",
        )
    except Exception:
        pass

    await state.clear()
    snd_doc = await users.find_one({"user_id": callback.from_user.id})
    snd_balance = snd_doc.get("balance", 0) if snd_doc else 0
    await callback.message.edit_text(
        f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ {amount:,} ‚≠ê –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id} –≤—ã–ø–æ–ª–Ω–µ–Ω.\n\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{snd_balance:,} ‚≠ê</b>\n\n"
        f"‚ö†Ô∏è <i>–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</i>",
        reply_markup=get_main_menu(),
    )
